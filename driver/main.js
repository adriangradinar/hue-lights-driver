const databox = require('node-databox');
const https = require('https');
const express = require('express');
const bodyParser = require('body-parser');

const DATABOX_ZMQ_ENDPOINT = process.env.DATABOX_ZMQ_ENDPOINT

// A time series and key value client to write data to also can be used to Observe input from apps
let time_series_client = databox.NewTimeSeriesClient(DATABOX_ZMQ_ENDPOINT, false); 
let key_value_client = databox.NewKeyValueClient(DATABOX_ZMQ_ENDPOINT, false);

// Global object to be updated by actuation events
var demo_actuator_1_obj = {"data": "nothing"};

//My https creds generated by the container manager
const credentials = databox.getHttpsCredentials();


const PORT = process.env.port || '8080';

const app = express();
app.use(bodyParser.json());
app.use(bodyParser.urlencoded({ extended: false }));

app.get('/status', function(req, res, next) {
    res.send("active");
});

app.get('/ui', function(req, res, next) {
  res.setHeader('Content-Type', 'application/json');
  res.status(200).send(JSON.stringify(demo_actuator_1_obj));

});

// Begin registering first actuator and actator observer
time_series_client.RegisterDatasource({
  Description: 'Demo actuator',
  ContentType: 'text/json',
  Vendor: 'Jimmy',
  DataSourceType: 'DemoActuator', // this is what is specified as DataSourceType in the app manifest
  DataSourceID: 'DemoActuator_1',
  StoreType: 'ts',
  IsActuator:true
})
.then(()=>{
  console.log("[info] Acutator data source registered");

  time_series_client.Observe('DemoActuator_1') // now need to observe datasource thats has just been created to watch for actuation events
  .then((actuationEmitter)=>{

    actuationEmitter.on('data',(data)=>{
      console.log("[Actuation] data received",'DemoActuator_1', data);
      demo_actuator_1_obj = data; // update global object witg data when actuation happens
    });

    actuationEmitter.on('error',(error)=>{
      console.log("[warn] error received from actuation emitter",'DemoActuator_1', error);
    });

  })
  .catch((err) => {
    console.warn("[Error Observing] ",'DemoActuator_1',err);
  });
})
.catch((err) => {
  console.warn("[Error registering] ", "DemoActuator_1",err);
});
// End registering first actuator and actator observer

// Begin registering timeseries data source
time_series_client.RegisterDatasource({
  Description: 'Demo data source 1',
  ContentType: 'text/json',
  Vendor: 'Jimmy',
  DataSourceType: 'Demo_Datasource', // this is what is specified as DataSourceType in the app manifest
  DataSourceID: 'DemoDatasource_1',
  StoreType: 'ts',
  IsActuator:false
})
.then(()=>{
  return key_value_client.RegisterDatasource({
    Description: 'Demo data source 2',
    ContentType: 'text/json',
    Vendor: 'Jimmy',
    DataSourceType: 'Demo_Datasource', // this is what is specified as DataSourceType in the app manifest
    DataSourceID: 'DemoDatasource_2',
    StoreType: 'kv',
    IsActuator:false
  })
})
.then(()=>{
  
  console.log("[info] attempting to write to DemoDatasource_1")
  time_series_client.Write("DemoDatasource_1", {"data":"foo"})
  .catch((err) => {
    console.warn("[Error writing to timeseries data store] ",'DemoDatasource_1',err);
  });

  console.log("[info] attempting to write to DemoDatasource_2")
  key_value_client.Write("DemoDatasource_2", {"data":"bar"})
  .catch((err) => {
    console.warn("[Error writing to keyvalue data store] ",'DemoDatasource_2',err);
  });

})
.catch((err) => {
  console.warn("[Error registering] ", "DemoDatasource_1 / DemoDatasource_2",err);
});
// End registering timeseries data source


//start the https server for the driver UI
https.createServer(credentials, app).listen(8080);